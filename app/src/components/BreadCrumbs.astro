---
import { Icon } from 'astro-icon/components'

interface Props {
	hideLastLink?: boolean;
}

const { hideLastLink } = Astro.props;


const pathSegments = Astro.url.pathname.split('/').filter(Boolean);
let breadcrumbs = pathSegments.map((segment, index) => {
  const href = `/${pathSegments.slice(0, index + 1).join('/')}`;
  return { label: segment, href: index === pathSegments.length - 1 ? undefined : href };
});

breadcrumbs = breadcrumbs.filter(item => item.href);
//console.log('breadcrumbs',breadcrumbs)

const showBreadCrumbs = breadcrumbs && breadcrumbs.length > 0;

const chevron = '<svg xmlns="http://www.w3.org/2000/svg" width="13" height="13" viewBox="0 0 20 20" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="sc-7a9d79d2-1 hlFFVn"><polyline points="9 18 15 12 9 6"></polyline></svg>'


---
{

showBreadCrumbs && 
<div class="bread-crumbs"> 
    <a href="/">Home</a>
    {hideLastLink ?
    breadcrumbs.map((item, index, {length}) => <span> <Icon name="fa6-solid:chevron-right" /> {index + 1 < length ? <a href={item.href}>{item.label}</a> : <span>{item.label}</span>}</span>) : 
    breadcrumbs.map(item => <span> <Icon name="fa6-solid:chevron-right" />  <a href={item.href}>{item.label}</a></span>)}
</div>
}

<style>
    .bread-crumbs{
        font-size: 1rem;
    }

    a {
        text-decoration: none;
        color: var(--gray);
        text-transform: capitalize;
    }

    a:hover {
        color: var(--gray-dark);
    }

    .bread-crumbs [data-icon="fa6-solid:chevron-right"]{
        height: 10px;
        color: var(--gray);
        margin: 0 .5rem;
    }
</style>